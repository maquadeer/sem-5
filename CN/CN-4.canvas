{
	"nodes":[
		{"id":"6926fb6514dab1ac","x":-340,"y":-180,"width":1020,"height":720,"type":"text","text":"Certainly! Let‚Äôs break down the answer into points using proper markdown:\n\n1. **Connection Establishment**:\n    \n    - The ‚Äúthree-way handshake‚Äù procedure is used to establish a connection between ==two TCP (Transmission Control Protocol) entities.==\n    - Typically, one side (usually the server) passively ==waits== for an incoming connection by executing the `LISTEN` and `ACCEPT` primitives in that order.\n    - The other side (the client) ==initiates== the connection by executing a `CONNECT` primitive. The client specifies the I==P address and port it wants to connect to==, the ==maximum TCP segment size it can handle==, and optionally includes some user data (e.g., a password).\n    - The `CONNECT` primitive ==sends a TCP segment with the `SYN` (synchronize) bit set and the `ACK` (acknowledge) bit unset==. It then waits for a response.\n2. **Server-Side Handling**:\n    \n    - When the `CONNECT` segment arrives at the destination (server), the TCP entity ==checks if any process has executed a `LISTEN` on the specified port ==(given in the Destination port field).\n    - If no process is listening on that port, ==the server sends a reply with the `RST` (reset) bit set to reject the connection==.\n    - If a process is actively listening on the port, it receives the incoming TCP segment. The process can either accept or reject the connection.\n3. **Acceptance and Acknowledgment**:\n    \n    - If the server process accepts the connection, it sends an acknowledgment segment back to the client.\n    - This acknowledgment confirms that the connection has been successfully established.\n\nRemember that this three-way handshake ensures reliable and orderly communication between the client and server in a TCP-based network. ü§ù"}
	],
	"edges":[]
}